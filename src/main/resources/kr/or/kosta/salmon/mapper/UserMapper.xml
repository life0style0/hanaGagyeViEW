<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.kosta.salmon.mapper.UserMapper">

	<!-- 1:N ResultMap 설정 -->
	<resultMap type="kr.or.kosta.salmon.domain.UserDTO" id="userMap">
		<id property="user_id" column="user_id"/>
		<result property="user_id" column="user_id"/>
		<result property="user_nickname" column="user_nickname"/>
		<result property="user_email" column="user_email"/>
		<result property="user_passwd" column="user_passwd"/>
		<result property="user_gender" column="user_gender"/>
		<result property="user_birthday" column="user_birthday"/>
		<result property="user_image" column="user_image"/>
		<result property="user_regdate" column="user_regdate"/>
		<association property="userLocAndCat" column="user_id" select="getUserSimplePsns"/>
		<collection property="authList" resultMap="authMap"/>
	</resultMap>

	<resultMap type="kr.or.kosta.salmon.domain.Auth" id="authMap">
		<result property="user_auth_id" column="user_auth_id"/>
		<result property="user_id" column="user_id"/>
		<result property="user_auth" column="user_auth"/>
	</resultMap>

	<select id="read" resultMap="userMap">
		SELECT users.user_id, 
		       users.user_passwd, 
		       users.user_nickname, 
		       users.user_email, 
		       users.user_gender, 
		       users.user_birthday, 
		       users.user_image, 
		       users.user_regdate, 
		       auth.user_auth 
		FROM   users users 
		       LEFT OUTER JOIN users_auth auth 
		                    ON users.user_id = auth.user_id 
		WHERE  users.user_id = #{user_id}
	</select>

	<insert id="createUser">
		INSERT INTO users 
		            (user_id, 
		             user_nickname, 
		             user_email, 
		             user_passwd, 
		             user_gender, 
		             user_birthday, 
		             user_image) 
		VALUES     (#{user_id}, 
		            #{user_nickname}, 
		            #{user_email}, 
		            #{user_passwd}, 
		            #{user_gender}, 
		            #{user_birthday}, 
		            #{user_image} ) 
	</insert>

	<insert id="insertUserAuth">
		INSERT INTO users_auth 
		            (user_auth_id, 
		             user_id, 
		             user_auth) 
		VALUES     (users_auth_id_seq.NEXTVAL, 
		            #{user_id}, 
		            'ROLE_USER') 
	</insert>
	<insert id="insertMemberAuth">
		INSERT INTO users_auth 
		            (user_auth_id, 
		             user_id, 
		             user_auth) 
		VALUES     (users_auth_id_seq.NEXTVAL, 
		            #{user_id}, 
		            'ROLE_MEMBER') 
	</insert>
	<insert id="insertAdminAuth">
		INSERT INTO users_auth 
		            (user_auth_id, 
		             user_id, 
		             user_auth) 
		VALUES     (users_auth_id_seq.NEXTVAL, 
		            #{user_id}, 
		            'ROLE_ADMIN') 
	</insert>
	<insert id="insertBasicPsns3">
	declare
		psnid NUMBER;
	begin

		SELECT psn_id_seq.nextval into psnid from dual;

		INSERT INTO psns 
		            (psn_id, 
		             user_id, 
		             location_id, 
		             ctgry_1, 
		             ctgry_2, 
		             ctgry_3) 
		VALUES     (psnid, 
		            #{user_id}, 
		            #{location_id},  
		            #{ctgry_1},   
		            #{ctgry_2},   
		            #{ctgry_3});
		
		INSERT INTO psn_scores(psn_score_id, psn_id)
		VALUES(psn_score_id_seq.nextval, psnid);

	END;
	</insert>

	<insert id="insertBasicPsns1">
		INSERT INTO psns 
		            (psn_id, 
		             user_id, 
		             location_id, 
		             ctgry_1) 
		VALUES     (psn_id_seq.NEXTVAL, 
		            #{user_id}, 
		            #{location_id},  
		            #{ctgry_1})
	</insert>

	<insert id="insertBasicPsns2">
		INSERT INTO psns 
		            (psn_id, 
		             user_id, 
		             location_id, 
		             ctgry_1, 
		             ctgry_2) 
		VALUES     (psn_id_seq.NEXTVAL, 
		            #{user_id}, 
		            #{location_id},  
		            #{ctgry_1},   
		            #{ctgry_2})
	</insert>

	<select id="searchUserById" resultMap="userMap">
		SELECT user_id, 
		       user_passwd, 
		       user_nickname, 
		       user_email, 
		       user_gender, 
		       user_birthday, 
		       user_image, 
		       user_regdate
		FROM   users 
		WHERE  user_id = #{user_id}
	</select>

	<select id="searchUserByEmail" resultMap="userMap">
		SELECT user_id, 
		       user_passwd, 
		       user_nickname, 
		       user_email, 
		       user_gender, 
		       user_birthday, 
		       user_image, 
		       user_regdate
		FROM   users 
		WHERE  user_email = #{user_email}
	</select>

	<select id="searchUserByNickname" resultMap="userMap">
		SELECT user_id, 
		       user_passwd, 
		       user_nickname, 
		       user_email, 
		       user_gender, 
		       user_birthday, 
		       user_image, 
		       user_regdate
		FROM   users 
		WHERE  user_nickname = #{user_nickname}
	</select>

	<select id="getUserCategories" resultType="kr.or.kosta.salmon.domain.UserLocAndCatsDTO">
		SELECT user_id, 
			   ctgry_1, 
		       ctgry_2, 
		       ctgry_3
		FROM   psns 
		WHERE  user_id = #{user_id}
	</select>

	<select id="getUserLocation" resultType="kr.or.kosta.salmon.domain.UserLocAndCatsDTO">
		SELECT user_id, 
			   location_id
		FROM   psns 
		WHERE  user_id = #{user_id}
	</select>
	
	<select id="getUserEmail" resultType="String">
		SELECT user_email
		FROM   users 
		WHERE  user_id = #{user_id}
	</select>

	<select id="getUserSimplePsns" resultType="kr.or.kosta.salmon.domain.UserLocAndCatsDTO">
		SELECT "user_id", 
		       "locationname", 
		       Listagg("categories", ',') 
		         within GROUP(ORDER BY ROWNUM) "categories" 
		FROM   (SELECT p.user_id       "user_id", 
		               l.location_name "locationname", 
		               c.ctgry_name    "categories" 
		        FROM   psns p 
		               inner join locations l 
		                       ON l.location_id = p.location_id 
		               join ctgries c 
		                 ON c.ctgry_id = p.ctgry_1 
		                     OR c.ctgry_id = p.ctgry_2 
		                     OR c.ctgry_id = p.ctgry_3 
		        WHERE  user_id = #{user_id} 
		        GROUP  BY user_id, 
		                  location_name, 
		                  ctgry_name) 
		GROUP  BY "user_id", 
		          "locationname"
	
	</select>
	
	<update id="changeNickname">
		UPDATE users 
		SET    user_nickname = #{user_nickname} 
		WHERE  user_id = #{user_id}
	</update>
	
	<update id="changeUserInfo">
		UPDATE users 
		SET    user_passwd = #{user_passwd},
		       user_email = #{user_email},
		       user_birthday = #{user_birthday},
		       user_gender = #{user_gender}
		WHERE  user_id = #{user_id}
	</update>
	
	<update id="changeUserLocation">
		UPDATE psns 
		SET    location_id= #{location_id}
		WHERE  user_id = #{user_id}
	</update>
	
	<select id="getAllCategories" resultType="kr.or.kosta.salmon.domain.CategoryDTO_sjh">
		SELECT ctgry_id, 
		       ctgry_name 
		FROM   ctgries
	</select>
	
	<update id="changeUserCategories">
		UPDATE psns 
		SET    ctgry_1= #{ctgry_1},
			   ctgry_2= #{ctgry_2},
			   ctgry_3= #{ctgry_3}
		WHERE  user_id = #{user_id}
	</update>
	
	<select id="getAllLocations" resultType="kr.or.kosta.salmon.domain.LocationDTO_sjh">
		SELECT location_id, 
		       location_name 
		FROM   locations
	</select>
	
	<update id="setUserResign">
		UPDATE users 
		SET    user_state='R'
		WHERE  user_id = #{user_id}
	</update>
	
	<select id="getUserPw" resultType="String">
		SELECT user_password 
		FROM   users
		WHERE  user_id = #{user_id}
	</select>
	
	<delete id="deleteUserAuth">
		DELETE FROM users_auth 
		WHERE  user_id = #{user_id}; 
	</delete>
	
	 
     <select id="searchUserInSNS"  resultMap="userMap">
      <![CDATA[
     	SELECT users.user_id, 
		       users.user_nickname, 
		       users.user_email, 
		       users.user_gender, 
		       users.user_birthday, 
		       users.user_image
		FROM   users 
		WHERE  user_nickname LIKE #{value} 
		OR     user_id LIKE #{value} 
	]]>
     </select>
        
	
</mapper>