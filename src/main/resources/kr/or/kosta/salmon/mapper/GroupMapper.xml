<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.kosta.salmon.mapper.GroupMapper">

	<!-- 1:N ResultMap 설정 -->
	<resultMap type="kr.or.kosta.salmon.domain.GroupDTO_lhr" id="groupMap">
		<id property="group_id" column="group_id"/>
		<result property="group_id" column="group_id"/>
		<result property="group_title" column="group_title"/>
		<result property="group_regdate" column="group_regdate"/>
		<result property="group_description" column="group_description"/>
		<result property="group_people_max" column="group_people_max"/>
		<result property="ctgry_1" column="ctgry_1"/>
		<result property="ctgry_2" column="ctgry_2"/>
		<result property="ctgry_3" column="ctgry_3"/>
		<collection property="comments" column="article_id" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.CommentDTO" select="getComments"/>
		
	</resultMap>
	
	<!-- 1:N ResultMap 설정 -->
	<resultMap type="kr.or.kosta.salmon.domain.SNSArticleDTO_sjh" id="articleMap">
		<id property="article_id" column="article_id"/>
		<result property="article_id" column="article_id"/>
		<result property="article_ctgry_id" column="article_ctgry_id"/>
		<result property="article_ctgry_description" column="article_ctgry_description"/>
		<result property="article_scope" column="article_scope"/>
		<result property="article_regdate" column="article_regdate"/>
		<result property="article_editdate" column="article_editdate"/>
		<result property="article_payment_type" column="article_payment_type"/>
		<result property="article_payment_fee" column="article_payment_fee"/>
		<result property="article_title" column="article_title"/>
		<result property="article_content" column="article_content"/>
		<result property="article_proposal_status" column="article_proposal_status"/>
		<result property="group_id" column="group_id"/>
		<result property="group_title" column="group_title"/>
		<result property="article_deleted" column="article_deleted"/>
		<result property="ctrgy_id" column="ctrgy_id"/>
		<result property="ctgry_name" column="ctgry_name"/>
		<result property="article_like_num" column="article_like_num"/>
		<result property="article_comment_num" column="article_comment_num"/>
		<collection property="imagePaths" column="article_id" javaType="java.util.ArrayList" ofType="string" select="getImages"/>
        <collection property="hashtags" column="article_id" javaType="java.util.ArrayList" ofType="string" select="getHashtagByArticleId"/>
        <collection property="likes" column="article_id" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.LikeDTO" select="getLikesByArticleId"/>
        <collection property="scraps" column="article_id" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.ScrapDTO" select="getScrapsByArticleId"/>
        <collection property="comments" column="article_id" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.CommentDTO" select="getCommentsByArticleId"/>
	</resultMap>


        <select id="getScrapsByArticleId" resultType="kr.or.kosta.salmon.domain.ScrapDTO">
        	SELECT scrap_id,
        		   user_id,
        		   article_id,
        		   to_char(scrap_regdate,'YYYY-MM-DD') "scrap_regdate" 
			FROM   scraps 
			WHERE  article_id = #{article_id}
        </select>

         <select id="getCommentsByArticleId" resultType="kr.or.kosta.salmon.domain.CommentDTO">
        	SELECT comment_id,
        		   comment_content,
        		   to_char(comment_regdate,'YYYY-MM-DD') "comment_regdate", 
        		   to_char(comment_editdate,'YYYY-MM-DD') "comment_editdate",
        		   article_id,
                   us.user_nickname,
                   us.user_id,
                   us.user_image
			FROM   comments co
	        join   users us on us.user_id=co.user_id
		    WHERE  article_id =  #{article_id}
		    order by comment_regdate
        </select>

        <select id="getLikesByArticleId" resultType="kr.or.kosta.salmon.domain.LikeDTO">
        	SELECT like_id,
        		   user_id,
        		   article_id,
        		   to_char(like_regdate,'YYYY-MM-DD') "like_regdate" 
			FROM   likes 
			WHERE  article_id = #{article_id}
        </select>

		<select id="getHashtagByArticleId" resultType="string">
		SELECT hashtag_value 
		FROM   hashtag_refs ref
		       inner join hashtags hash on ref.hashtag_id=hash.hashtag_id 
		WHERE  article_id = #{articleId}        
        </select>

	<!-- 소모임 번호로 그룹 Read -->
	<select id="read" resultType="kr.or.kosta.salmon.domain.GroupDTO_lhr">
		SELECT * FROM groups WHERE  group_id = #{group_id}
	</select>


	<!-- 소모임 그룹 만들기 -->
	<insert id="createGroup">
		INSERT INTO groups
		            (group_id,
		             group_title,
		             group_regdate,
		             group_description,
		             group_people_max,
		             user_id,
		             ctgry_1,
		             ctgry_2,
		             ctgry_3)
		VALUES     (group_id_seq.NEXTVAL,
		            #{group_title},
		            sysdate,
		            #{group_description},
		            #{group_people_max},
		            #{user_id},
		            #{ctgry_1},
		            #{ctgry_2},
		            #{ctgry_3} )
	</insert>
	
	<!-- 소모임 그룹 만들기 (SelectKey 활용) -->
<!-- 	<insert id="createSelectGroup">
	<selectKey keyProperty="group_id" order="BEFORE" resultType="String">
		select group_id_seq.NEXTVAL from dual
	</selectKey>
	INSERT INTO groups
	            (group_id,
	             group_title,
	            group_description,
	             group_people_max,
	             user_id,
	             ctgry_1,
	             ctgry_2,
	             ctgry_3)
	VALUES     (#{group_id},
	            #{group_title},
	            #{group_description},
	            #{group_people_max},
	            #{user_id},
	            #{ctgry_1},
	            #{ctgry_2},
	            #{ctgry_3} )
	</insert> -->
	
	<!-- 소모임 그룹 만들기 -->
	<insert id="createSelectGroup">
	DECLARE
	  groupId NUMBER;
	BEGIN
	select group_id_seq.nextval into groupId from dual;
	
	INSERT INTO groups
	            (group_id,
	             group_title,
	             group_regdate,
	             group_description,
	             group_people_max,
	             user_id,
	             ctgry_1,
	             ctgry_2,
	             ctgry_3)
	VALUES     (groupId,
	            #{group_title},
	            sysdate,
	            #{group_description},
	            #{group_people_max},
	            #{user_id},
	            #{ctgry_1},
	            #{ctgry_2},
	            #{ctgry_3} );
	            
	INSERT INTO group_users
	            (group_users_id,
	             group_id,
	             user_id)
	VALUES     (group_users_id_seq.nextval,
	            groupId,
	            #{user_id});
	
	END;
	</insert>
	
	<!-- 소모임 등록회원으로 들어가기 -->
	<!-- Insert문 : ResultType설정 해주지 않아도 됨 -->
	<insert id="joinGroup">
	INSERT INTO group_users
	            (GROUP_USERS_ID,
	             group_id,
	             user_id)
	VALUES     (group_users_id_seq.nextval,
	            #{group_id},
	            #{user_id})
	</insert>
	
	<!-- 소모임 현재인원, 최대인원 Count -->
	<select id="getCount" resultType="kr.or.kosta.salmon.domain.GroupCountDTO">
	SELECT group_people_max      "max",
	       Count(group_users_id) "now"
	FROM   groups
	       LEFT OUTER JOIN group_users using(group_id)
	WHERE  group_id = #{group_id}
	GROUP  BY group_people_max
	</select>
	
	<!-- UserCategory 가져오기  -->
	<!-- psns : 개인화 정보 -->
	<select id="getUserCategories" resultType="kr.or.kosta.salmon.domain.UserLocAndCatsDTO">
		SELECT user_id,
			   ctgry_1,
		       ctgry_2,
		       ctgry_3
		FROM   psns
		WHERE  user_id = #{user_id}
	</select>

	<!-- 카테고리 가져오기 -->
	<select id="getAllCategories" resultType="kr.or.kosta.salmon.domain.CategoryDTO_sjh">
		SELECT ctgry_id,
		       ctgry_name
		FROM   ctgries
		
	</select>
	
	<select id="getCategory" resultType="string">
		SELECT ctgry_name
		FROM   ctgries
	</select>
	
	<select id="getList" resultType="kr.or.kosta.salmon.domain.GroupDTO_lhr">
		<![CDATA[
		select * from groups where group_id > 0 
		]]>
	</select>
	
		<!-- 이미지 가져오기  -->
		 <select id="getImages" resultType="string">
		SELECT image_path
		FROM images where article_id = #{article_id}
	     </select>
        
       <!-- 댓글 가져오기 -->
       <select id="getComments" resultType="kr.or.kosta.salmon.domain.CommentDTO">
		SELECT comment_id, 
		       comment_content, 
		       to_char(comment_regdate,'YYYY"년" MM"월" DD"일" AM hh:mm') "comment_regdate", 
		       user_id, 
		       user_image,
		       user_nickname 
		FROM   comments left outer join users using(user_id)
		WHERE  article_id = #{articleId}
		order by comment_regdate asc
        </select>
        
        <!-- sns 그룹 -->
	 <select id="getSNSGroups" resultMap="articleMap">
		 SELECT article_id, 
             article_ctgry_id, 
             article_scope, 
             To_char(article_regdate, 'YYYY-MM-DD') "article_regdate", 
             article_editdate, 
             article_payment_type, 
             article_payment_fee, 
             article_title, 
             article_content, 
             article_proposal_status, 
             group_id, 
             user_id,
             user_nickname, 
             article_comment_num,
             article_like_num,
             article_deleted 
      FROM   articles join users using(user_id)
      where group_id = #{group_id}    
        </select>
	

</mapper>