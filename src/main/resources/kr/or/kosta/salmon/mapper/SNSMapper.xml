<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
                        
<mapper namespace="kr.or.kosta.salmon.mapper.SNSMapper">
	
	<!-- 1:N ResultMap 설정 -->
	<resultMap type="kr.or.kosta.salmon.domain.SNSArticleDTO_sjh" id="articleMap">
		<id property="article_id" column="article_id"/>
		<result property="article_id" column="article_id"/>
		<result property="article_ctgry_id" column="article_ctgry_id"/>
		<result property="article_ctgry_description" column="article_ctgry_description"/>
		<result property="article_scope" column="article_scope"/>
		<result property="article_regdate" column="article_regdate"/>
		<result property="article_editdate" column="article_editdate"/>
		<result property="article_payment_type" column="article_payment_type"/>
		<result property="article_payment_fee" column="article_payment_fee"/>
		<result property="article_title" column="article_title"/>
		<result property="article_content" column="article_content"/>
		<result property="article_proposal_status" column="article_proposal_status"/>
		<result property="group_id" column="group_id"/>
		<result property="group_title" column="group_title"/>
		<result property="article_deleted" column="article_deleted"/>
		<result property="ctrgy_id" column="ctrgy_id"/>
		<result property="ctgry_name" column="ctgry_name"/>
		<result property="article_like_num" column="article_like_num"/>
		<result property="article_comment_num" column="article_comment_num"/>
		<collection property="imagePaths" column="article_id" javaType="java.util.ArrayList" ofType="string" select="getImages"/>
        <collection property="hashtags" column="article_id" javaType="java.util.ArrayList" ofType="string" select="getHashtagByArticleId"/>
        <collection property="likes" column="article_id" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.LikeDTO" select="getLikesByArticleId"/>
        <collection property="scraps" column="article_id" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.ScrapDTO" select="getScrapsByArticleId"/>
        <collection property="comments" column="article_id" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.CommentDTO" select="getCommentsByArticleId"/>
	</resultMap>
	<resultMap type="kr.or.kosta.salmon.domain.MainChartDTO" id="ChartMap">
		<result property="totalFee" column="totalFee"/>
	</resultMap>
	
	<resultMap type="kr.or.kosta.salmon.domain.SNSUserPageDTO" id="snsUserPageMap">
		<result property="user_id" column="user_id"/>
		<association property="user" column="user_id" javaType="kr.or.kosta.salmon.domain.UserDTO" select="searchUserById"/>
		<association property="myPsnsInfo" column="user_id" javaType="kr.or.kosta.salmon.domain.UserLocAndCatsDTO" select="getUserSimplePsns"/>
        <collection property="myArticles" column="user_id"  javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.SNSArticleDTO_sjh" select="getSNSArticleByWriter"/>
        <collection property="likeArticles" column="user_id"  javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.SNSArticleDTO_sjh" select="getArticleByLikeUser"/>
        <collection property="myfollowings" column="user_id" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.UserDTO" select="getFollowingList"/>
        <collection property="myGroups" column="user_id" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.GroupDTO_lhr" select="getJoingingGroupList"/>
	</resultMap>
	
	<resultMap type="kr.or.kosta.salmon.domain.MainFeedArticlesDTO" id="snsNewAndPopArticlesMap">
		<result property="today" column="today"/>
        <collection property="myfeedArticles" column="today" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.SNSArticleDTO_sjh" select="getSNSArticles"/>
        <collection property="newArticles" column="today" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.SNSArticleDTO_sjh" select="getSNSNewArticles"/>
        <collection property="popArticles" column="today" javaType="java.util.ArrayList" ofType="kr.or.kosta.salmon.domain.SNSArticleDTO_sjh" select="getSNSPopularArticles"/>
	</resultMap>
	

	  <select id="getSNSArticles" resultMap="articleMap">
		SELECT article_id, 
		       article_ctgry_id, 
		       article_scope, 
		       To_char(article_regdate, 'YYYY-MM-DD') "article_regdate", 
		       article_editdate, 
		       article_payment_type, 
		       article_payment_fee, 
		       article_title, 
		       article_content, 
		       article_proposal_status, 
		       group_id, 
		       user_id,
		       user_nickname, 
		       article_comment_num,
		       article_like_num,
		       article_deleted 
		FROM   articles 
		JOIN   users USING (user_id)
		WHERE  article_scope IN ( 'u', 'g' ) 
		       AND user_id IN ( #{user_id} ) 
		        OR user_id IN (SELECT fol.user_id user_id 
		                       FROM   users us 
		                              inner join followers fol 
		                                      ON us.user_id = fol.follower_user_id 
		                       WHERE  us.user_id = #{user_id}) 
		        OR user_id IN ((SELECT user_id 
		                        FROM   group_users 
		                        WHERE  group_id IN (SELECT group_id 
		                                            FROM   users us 
		                                                   inner join group_users gus 
		                                                           ON us.user_id = 
		                                                              gus.user_id 
		                                            WHERE  us.user_id = #{user_id}))) 
        </select>
        
	 	<select id="getImages" resultType="string">
		SELECT image_path
		FROM images where article_id = #{article_id}
        </select>
		
		
		<select id="getHashtagByArticleId" resultType="string">
		SELECT hashtag_value 
		FROM   hashtag_refs ref
		       inner join hashtags hash on ref.hashtag_id=hash.hashtag_id 
		WHERE  article_id = #{articleId}        
        </select>
        
        <select id="getAllHashTagGroup" resultType="kr.or.kosta.salmon.domain.HashTagGroupDTO">
        <![CDATA[
        SELECT Count(hashtag_id) count_hashtag_value, 
		       hashtag_value 
		FROM   hashtags 
		       join hashtag_refs USING(hashtag_id) 
		WHERE  article_id IN(SELECT article_id 
		                     FROM   articles 
		                     WHERE  article_scope IN ( 'u', 'g' ) 
                             AND SYSDATE - article_regdate < 8) 
		GROUP  BY hashtag_value 
		ORDER  BY count_hashtag_value DESC ]]>
        </select>
        
        <select id="getChartTotalFee" resultMap="ChartMap">
        	SELECT 	sum(article_payment_fee) totalFee
        	FROM 	articles 
        	WHERE 	to_char(article_regdate,'MM') = to_char(sysdate,'MM') and user_id = #{user_id}
        </select>
        
        <select id="getChartCategoryFee" resultType="kr.or.kosta.salmon.domain.MainGroupCtFeeDTO">
        	SELECT 		ctgry_name, sum(article_payment_fee) ctgry_fee_sum 
        	FROM 		ctgry_values join articles using(article_id) join ctgries using(ctgry_id) where ctgry_id in (select ctgry_id from ctgry_values join ctgries using(ctgry_id) 
        	WHERE 		article_id in (
        								SELECT 	article_id 
        								FROM 	articles 
        								WHERE	to_char(article_regdate,'MM') = to_char(sysdate,'MM') and user_id = #{user_id}))  
        	GROUP BY	ctgry_name
        </select>
        
        
        
        <select id="getLikesByArticleId" resultType="kr.or.kosta.salmon.domain.LikeDTO">
        	SELECT like_id,
        		   user_id,
        		   article_id,
        		   to_char(like_regdate,'YYYY-MM-DD') "like_regdate" 
			FROM   likes 
			WHERE  article_id = #{article_id}
        </select>
        
         <select id="getCommentsByArticleId" resultType="kr.or.kosta.salmon.domain.CommentDTO">
        	SELECT comment_id,
        		   comment_content,
        		   to_char(comment_regdate,'YYYY-MM-DD') "comment_regdate", 
        		   to_char(comment_editdate,'YYYY-MM-DD') "comment_editdate",
        		   article_id,
                   us.user_nickname,
                   us.user_id,
                   us.user_image
			FROM   comments co
	        join   users us on us.user_id=co.user_id
		    WHERE  article_id =  #{article_id}
		    order by comment_regdate
        </select>
        
        <select id="getNewCommentsByArticle" resultType="kr.or.kosta.salmon.domain.CommentDTO">
        	SELECT comment_id,
        		   comment_content,
        		   to_char(comment_regdate,'YYYY-MM-DD') "comment_regdate", 
        		   to_char(comment_editdate,'YYYY-MM-DD') "comment_editdate",
        		   article_id,
                   us.user_nickname,
                   us.user_id,
                   us.user_image
			FROM   comments co
	        join   users us on us.user_id=co.user_id
		    WHERE  article_id =  #{article_id}
		    AND    comment_id <![CDATA[ > #{comment_id} ]]>
		    order by comment_regdate
        </select>
        
        
        <select id="getScrapsByArticleId" resultType="kr.or.kosta.salmon.domain.ScrapDTO">
        	SELECT scrap_id,
        		   user_id,
        		   article_id,
        		   to_char(scrap_regdate,'YYYY-MM-DD') "scrap_regdate" 
			FROM   scraps 
			WHERE  article_id = #{article_id}
        </select>
        
        <select id="getSNSArticleByWriter" resultMap="articleMap">
	        SELECT article_id,
			       article_ctgry_id,
			       article_scope,
			       to_char(article_regdate,'YYYY-MM-DD') "article_regdate",
			       article_editdate,
			       article_payment_type,
			       article_payment_fee,
			       article_title,
			       article_content,
			       article_proposal_status,
			       group_id,
			       user_id,
			       user_nickname,
			       article_deleted
			FROM   articles
			JOIN  users USING (user_id)
	    	where user_id=#{user_id}
	    	ORDER  BY article_regdate DESC 
        </select>
	
	<insert id="askFollow">
		INSERT INTO followers 
		            (follower_id, 
		             follower_regdate, 
		             follower_user_id, 
		             user_id) 
		VALUES     (follower_id_seq.NEXTVAL, 
			        SYSDATE, 
			        #{follower_user_id}, 
			        #{user_id})
	</insert>
	
	<delete id="askUnfollow">
		DELETE followers 
		WHERE  follower_user_id = #{follower_user_id} 
		AND    user_id = #{user_id}
	</delete>
	
	<select id="checkFollowing" resultType="int">
		SELECT count(follower_id) 
		FROM   followers 
		WHERE  follower_user_id = #{follower_user_id} 
		       AND user_id = #{user_id}
	</select>
	
	<select id="getFollowingList" resultType="kr.or.kosta.salmon.domain.UserDTO">
		SELECT us.user_nickname, 
		       us.user_id, 
		       us.user_image 
		FROM   users us 
		       join followers fo 
		         ON us.user_id = fo.user_id 
		WHERE  fo.follower_user_id = #{user_id} 
		ORDER  BY fo.follower_regdate DESC 
	</select>
	
	<select id="getJoingingGroupList" resultType="kr.or.kosta.salmon.domain.GroupDTO_lhr">
	SELECT g.group_id, 
	       g.group_title, 
	       g.group_regdate, 
	       g.group_description, 
	       g.group_people_max, 
	       g.user_id, 
	       g.ctgry_1, 
	       g.ctgry_2, 
	       g.ctgry_3 
	FROM   GROUPS g 
	       join group_users gu 
	         ON gu.group_id = g.group_id 
	WHERE  gu.user_id = #{user_id} 
	GROUP  BY g.group_id, 
	          g.group_title, 
	          g.group_regdate, 
	          g.group_description, 
	          g.group_people_max, 
	          g.user_id, 
	          g.ctgry_1, 
	          g.ctgry_2, 
	          g.ctgry_3
	ORDER  BY g.group_regdate DESC 
	</select>
	
	<select id="getSNSUserPageInfo" resultMap="snsUserPageMap">
		SELECT user_id
		FROM   users 
		WHERE  user_id = #{user_id}
	</select>
	
	<select id="getUserSimplePsns" resultType="kr.or.kosta.salmon.domain.UserLocAndCatsDTO">
		SELECT "user_id", 
		       "locationname", 
		       Listagg("categories", ',') 
		         within GROUP(ORDER BY ROWNUM) "categories" 
		FROM   (SELECT p.user_id       "user_id", 
		               l.location_name "locationname", 
		               c.ctgry_name    "categories" 
		        FROM   psns p 
		               inner join locations l 
		                       ON l.location_id = p.location_id 
		               join ctgries c 
		                 ON c.ctgry_id = p.ctgry_1 
		                     OR c.ctgry_id = p.ctgry_2 
		                     OR c.ctgry_id = p.ctgry_3 
		        WHERE  user_id = #{user_id} 
		        GROUP  BY user_id, 
		                  location_name, 
		                  ctgry_name) 
		GROUP  BY "user_id", 
		          "locationname"
	
	</select>
	
	<select id="searchUserById" resultType="kr.or.kosta.salmon.domain.UserDTO">
		SELECT user_id, 
		       user_passwd, 
		       user_nickname, 
		       user_email, 
		       user_gender, 
		       user_birthday, 
		       user_image, 
		       user_regdate
		FROM   users 
		WHERE  user_id = #{user_id}
	</select>
	
	<insert id="likeArticle">
	INSERT INTO likes 
	            (like_id, 
	             user_id, 
	             article_id, 
	             like_regdate) 
	VALUES     (like_id_seq.NEXTVAL, 
	            #{user_id}, 
	            #{article_id}, 
	            SYSDATE)
	</insert>
	
	<delete id="unlikeArticle">
		DELETE likes 
		WHERE  article_id = #{article_id} 
		AND    user_id = #{user_id}
	</delete>
	
	<select id="getArticleByArticleId" resultMap="articleMap">
		SELECT article_id, 
		       article_ctgry_id, 
		       article_ctgry_description, 
		       article_scope, 
		       To_char(article_regdate, 'YYYY-MM-DD') "article_regdate", 
		       article_editdate, 
		       article_payment_type, 
		       article_payment_fee, 
		       article_title, 
		       article_content, 
		       article_proposal_status, 
		       group_id, 
		       group_title, 
		       user_nickname, 
		       article_deleted, 
		       ctgry_id, 
		       ctgry_name 
		FROM   articles 
		       join users USING (user_id) 
		       join ctgry_values USING (article_id) 
		       join ctgries USING (ctgry_id) 
		       join article_ctgries USING (article_ctgry_id) 
		       left outer join GROUPS USING (group_id) 
		WHERE  article_id = #{article_id}
	</select>
	
	<insert id="scrapArticle">
	INSERT INTO scraps 
	            (scrap_id, 
	             user_id, 
	             article_id, 
	             scrap_regdate) 
	VALUES     (scrap_id_seq.NEXTVAL, 
	            #{user_id}, 
	            #{article_id}, 
	            SYSDATE)
	</insert>
	
	<select id="getArticleByLikeUser" resultMap="articleMap">
	SELECT ar.article_id, 
	       ar.article_ctgry_id, 
	       article_scope, 
	       To_char(article_regdate, 'YYYY-MM-DD') "article_regdate", 
	       article_editdate, 
	       article_payment_type, 
	       article_payment_fee, 
	       article_title, 
	       article_content, 
	       article_proposal_status, 
	       group_id, 
	       ar.user_id, 
	       us.user_nickname, 
	       article_deleted 
	FROM   articles ar 
	       join likes li 
	         ON li.article_id = ar.article_id 
	       join users us 
	         ON us.user_id = ar.user_id 
	WHERE  li.user_id = #{user_id} 
	ORDER  BY article_regdate DESC 
	</select>
	
	<insert id="writeComment">
	INSERT INTO comments 
	            (comment_id, 
	             comment_content, 
	             comment_regdate, 
	             comment_editdate, 
	             user_id, 
	             article_id) 
	VALUES     (comment_id_seq.NEXTVAL, 
	            #{comment_content}, 
	            SYSDATE, 
	            SYSDATE, 
	            #{user_id}, 
	            #{article_id})
	</insert>
	
	<select id="getCommentsByArticle" resultType="kr.or.kosta.salmon.domain.CommentDTO">
		SELECT comment_id, 
		       comment_content, 
		       comment_regdate, 
		       comment_editdate, 
		       user_id, 
		       user_nickname, 
		       user_image,
		       article_id 
		FROM   comments 
		       join users USING(user_id) 
		WHERE  article_id = #{article_id} 
	</select>
	
	<select id="getSimpleUser" resultType="kr.or.kosta.salmon.domain.UserDTO">
	SELECT user_id, 
	       user_nickname, 
	       user_image 
	FROM   users 
	WHERE  user_id = #{user_id}
	</select>
	
	<delete id="deleteComment">
		DELETE comments 
		WHERE  comment_id = #{comment_id} 
	</delete>
	
	<insert id="reportArticle">
		INSERT INTO reports 
		            (report_id, 
		             user_id, 
		             article_id, 
		             report_reason,
		             report_regdate) 
		VALUES     (report_id_seq.NEXTVAL, 
		            #{user_id}, 
		            #{article_id}, 
		            #{report_reason},
		            SYSDATE)
	</insert>
	
	 <select id="getSNSNewArticles" resultMap="articleMap">
		 <![CDATA[
		SELECT article_id, 
		       article_ctgry_id, 
		       article_scope, 
		       To_char(article_regdate, 'YYYY-MM-DD') "article_regdate", 
		       article_editdate, 
		       article_payment_type, 
		       article_payment_fee, 
		       article_title, 
		       article_content, 
		       article_proposal_status, 
		       group_id, 
		       user_id, 
		       user_nickname, 
		       article_deleted 
		FROM   articles 
		       join users USING (user_id) 
		WHERE  article_scope IN ( 'u', 'g' ) 
		AND    SYSDATE-article_regdate <8
		ORDER  BY article_regdate
		]]>
     </select>
     
     <select id="getSNSPopularArticles" resultMap="articleMap">
      <![CDATA[
		SELECT article_id, 
		       article_ctgry_id, 
		       article_scope, 
		       To_char(article_regdate, 'YYYY-MM-DD') "article_regdate", 
		       article_editdate, 
		       article_payment_type, 
		       article_payment_fee, 
		       article_title, 
		       article_content, 
		       article_proposal_status, 
		       group_id, 
		       user_id, 
		       user_nickname, 
		       article_deleted, 
		       article_like_num 
		FROM   articles 
		       join users USING (user_id) 
		WHERE  article_scope IN ( 'u', 'g' ) 
		AND    SYSDATE-article_regdate <8
		ORDER  BY article_like_num DESC
		]]>
     </select>
     
     <select id="getNewAndPopArticles" resultMap="snsNewAndPopArticlesMap">
     	SELECT To_char(SYSDATE, 'YYYY-MM-DD') "today" 
		FROM   dual
     </select>
     
     <select id="getMyFeedArticles" resultMap="snsNewAndPopArticlesMap">
     	SELECT To_char(SYSDATE, 'YYYY-MM-DD') "today" 
		FROM   dual
     </select>
    
</mapper>